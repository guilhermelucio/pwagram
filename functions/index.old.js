const fs = require('fs');
const functions = require('firebase-functions');
const admin = require('firebase-admin');
const cors = require('cors')({origin: true});
const serviceAccount = require("./pwa-gram-fb-key.json");
const webpush = require('web-push');
const formidable = require('formidable');
const UUID = require('uuid-v4');
const gcs = require('@google-cloud/storage')({
    projectId: 'pwa-gram-7e675',
    keyFilename: 'pwa-gram-fb-key.json'
});

// // Create and Deploy Your First Cloud Functions
// // q
//
admin.initializeApp({
    databaseURL: 'https://pwa-gram-7e675.firebaseio.com/',
    credential: admin.credential.cert(serviceAccount)
});

exports.storePostData = functions.https.onRequest((request, response) => {
    cors(request, response, () => {
        // Parsing the incoming data
        const formData = new formidable.IncomingForm();
        const uuid = new UUID();
        formData.parse(request, (err, fields, files) => {
            // tmp is a folder available on google storage
            fs.rename(files.image.path, `/tmp/${files.image.name}`);
            
            // Uploading to the Google Cloud Storage
            // Bucket name available on the Storage tab on Firebase Storage
            const bucket = gcs.bucket('pwa-gram-7e675.appspot.com');
            bucket.upload(`/tmp/${files.image.name}`, {
                uploadType: 'media',
                metadata: {
                    // Metadata for the files
                    metadata: {
                        contentType: files.file.type,
                        // Generate a unique string and create the public URL with it
                        firebaseStorageDownloadTokens: uuid
                    }
                }
            }, (err, file) => {
                // This code will execute as a callback of the Google Storage upload method
                if (!err) {

                    // DATABASE - Starting the database operation
                    // fields is provided by formidable
                    const promise = admin.database().ref('posts').push({
                        id: fields.id,
                        title: fields.title,
                        // Funky code to get the public URL generated by the storage
                        image: `https://firebasestorage.googleapis.com/v0/b/${bucket.name}/o/${encodeURIComponent(file.name)}?alt=media&token=${uuid}`,
                        location: fields.location
                    });
                    promise
                        .then(() => {
                            // After saving, create a new push notification to alert app users
                            webpush.setVapidDetails(
                                'mailto:guilhermelucio.design@gmail.com',
                                'BIyTDSIbL1H8S9TdesqxlSByQVu36zADcMDIErjbceZDw3gLrEqZRbYiJt4t4Eogh6b1pgXpAZv_OqaK-0qkJ-M',
                                '33eMz-bmheacx21yZpXdmmWjF5-Bj0h6LmFMQwMryBY'
                            );
                            return admin.database().ref('subscriptions').once('value');
                        })
                        .then(subscriptions => {
                            /**
                             * For each is provided by the admin.database api to loop through the results
                             */
                            subscriptions.forEach(sub => {
                                /**
                                 * sub is each item inside of subscription, as it was used a special
                                 * .forEach admin method to loop through items, before accessing the
                                 * values of each item, the method val should be executed, this gives
                                 * access to the properties of the database items
                                 */
                                const pushConfig = {
                                    endpoint: sub.val().endpoint,
                                    keys: sub.val().keys // auth and p256dh properties
                                };
            
                                /**
                                 * Sending the notification
                                 * The payload of the notification is arbitrary, anything could be passed in
                                 **/
                                webpush
                                    .sendNotification(pushConfig, JSON.stringify({
                                        title: 'New Post',
                                        content: 'New post added!!!',
                                        openURL: '/'
                                    }))
                                    .catch(err => console.error(err));
                            });
                            return response.status(201).json({ message: 'Data stored', id: request.body.id });
                        })
                        .catch(err => response.status(500).json({ error: err }));

                } else {

                }
            });
        });
    });
});
